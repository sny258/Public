$changes_ps = git status -s | where-object {$_ -notmatch "^D .*"} | foreach-object{($_.substring(3))} | foreach-object{($_ -split '-> ')[-1]} | foreach-object{$_ -replace '"',''} | where-object {$_ -like "*.ps1" -or $_ -like "*.psm1"}


$changes_tf = git status -s | where-object {$_ -notmatch "^D .*"} | foreach-object{($_.substring(3))} | foreach-object{($_ -split '-> ')[-1]} | foreach-object{$_ -replace '"',''} | where-object {$_ -like "*.tf" -or $_ -like "*.tfvars"} | split-path | Select-Object -Unique


#PowerShell
if ($changes_ps) {

	write-output "This is a pre-commit PowerShell call"
	write-output "======================================="

	$output = @()

	foreach ($change in $changes_ps) {
		$winPath = $change.replace("/", "\")
		$winPath = ".\$winPath"
		
		if (Test-Path -Path $winPath) {
			$out = Invoke-ScriptAnalyzer -Path $winPath -severity Error, ParseError
			$output += $out
		}
	}

	if ($output.Count -ne 0) {
		Write-Output "Basic scripting errors were found in updated scripts. fix or use git commit --no-verify"
		write-output "======================================="
		$output
		exit 1
	}
	else {
		Write-Output "pre-commit PowerShell call succeeded"
		Write-Output "                                    "
	}
}


#Terraform tflint
if ($changes_tf) {

    write-output "This is a pre-commit terraform tflint call"
    write-output "======================================="
    
    $count = @($changes_tf).length
    $count1 = $null
    $pwd = Get-Location
    
    foreach ($change in $changes_tf) {
        $output = @()
        $winPath = $change.replace("/", "\")
        $winPath = ".\$winPath"
    
		if (Test-Path -Path $winPath) {
			cd $winPath
			$out = tflint --format json
			$output += $out
			cd $pwd
			}
		
		$valid = "{`"issues`":[],`"errors`":[]}"
	  
	  
		if ($output -eq $valid) {
			Write-Output "pre-commit terraform tflint call succeeded for directory $winPath"
			Write-Output " "
			$count1 += 1
			}
		else {
			Write-Output "syntax errors were found in for directory $winPath"
			write-output "======================================="
			cd $winPath
			tflint
			cd $pwd
			}
    }
    
    if ($count1 -eq $count) {
        Write-Output "pre-commit terraform tflint call succeeded for all changes"
        Write-Output " "
    }
    else {
        Write-Output "syntax errors were found in updated scripts. fix or use git commit --no-verify"
        write-output "======================================="
        exit 1
    }
}



#Terraform validate
if ($changes_tf) {
	
	write-output "This is a pre-commit terraform validate call"
	write-output "======================================="
	
	$count = @($changes_tf).length
	$count1 = $null
	
	foreach ($change in $changes_tf) {
		$out = @()
		$winPath = $change.replace("/", "\")
		$winPath = ".\$winPath"
		write-output $winPath 
	
		if (Test-Path -Path $winPath) {
			terraform -chdir="$winPath" init -backend=false
			$out = terraform -chdir="$winPath" validate -json | convertfrom-json
		}
		

		if ($out.error_count -eq 0) {
			Write-Output "pre-commit terraform validate call succeeded for $winPath"
			Write-Output "                                            "
			#Remove the files generated by terraform init 
			Remove-Item -LiteralPath "$winPath\.terraform" -Force -Recurse
			Remove-Item -Path "$winPath\.terraform.lock.hcl" -Force
			$count1 += 1
		}
		else {
			Write-Output "validation errors were found in for directory $winPath"
			write-output "======================================="
			terraform -chdir="$winPath" validate
			#Remove the files generated by terraform init 
			Remove-Item -LiteralPath "$winPath\.terraform" -Force -Recurse
			Remove-Item -Path "$winPath\.terraform.lock.hcl" -Force
		}
	}
	

	if ($count1 -eq $count) {
		Write-Output "pre-commit terraform validate call succeeded for all changes"
		Write-Output "                                            "
	}
	else {
		Write-Output "validation errors were found in updated scripts. fix or use git commit --no-verify"
		write-output "======================================="
		exit 1
	}
}

