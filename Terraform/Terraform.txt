
---------- Terraform -------------------------

download terraform and azure CLI
Install terraform and azure CLI on machine
using az login connect to azure subscription
write script for resources

main.tf file				-- file with terraform script, what we need to create
Output.tf file				-- what output we want to after terraform apply
variables.tf file			-- variables which can be used in main.tf FILE

** Automatically backend will be the directory where main.tf file is present, terraform.tfstate file will be generated her.
	but if we want, we can specify the backend by adding code block in main.tf file.

terraform init						-- initialize a backend and Provider Plugins.

terraform validate 					-- to verify Configuration/Syntax

terraform fmt						-- to check formate of script

terraform plan						-- Will display what main.tf will going to do
									-- You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

terraform plan -out xxx				-- will save the plan to xxx file, which can be executed later

terraform apply						-- to deploy everything present in main.tf file
terraform apply "xxx"				-- will execute the plan xxx
terraform apply -auto-approve		-- to auto approve the apply

terraform.tfstate					-- this file generated after apply command, and it shows all info by created infra

terraform output --json				-- this will show output details in JSON formate

terraform destroy					-- to destroy everything we created via main.tf file (All resources)

terraform state list				-- show all available resource_type.name (ex- azuredevops_project.project)

terraform destroy -target RESOURCE_TYPE.NAME										-- to destroy specific resource
terraform destroy -target RESOURCE_TYPE.NAME -target RESOURCE_TYPE2.NAME			-- to destroy multiple resources



** State Lock Issue --> when a developer don't type Yes/No after terraform apply and at the same time other developer exec terraform apply.

** Little Demo -- youtube.com/watch?v=i-Ky1Tut_2I

** Usually Backend is the place where all the .tf files are present locally.
	Backend is where 'terraform.tfstate' file will be generated and terraform will refer it for future operations.

** We can change the Backend also, Most preferably on Cloud so that every developer can work on the same Infra.
	We can change the backedn locally also if we want, but that is a rare scenario.

** for local change of backend, Add below code plock to main.tf file
	Demo:- terraform.io/language/settings/backends/local
	
	terraform {
	  backend "local" {
		path = "C:/Users/sanjay.c.verma/Desktop/tf backend/terraform.tfstate"
	  }
	}
	
** When changing the backend locally, Terraform will give us option to migrate the state file when using 'terraform init' command.

 	-- If you wish to attempt automatic migration of the state, use "terraform init -migrate-state".
 	-- If you wish to store the current configuration with no changes to the state, use "terraform init -reconfigure".
	
** for Remote change of Backend, Add below code to main.tf file
	ex:- Azure Storage account has a Blob container to store file (will act as Backend).
	Demo:- https://www.terraform.io/language/settings/backends/azurerm
	Demo Youtube:- https://www.youtube.com/watch?v=d7F1KmeeFyI
	
	
	
	
-------------- AKS-ACR Script --------------

terraform {
  #required_version = ">=0.12"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 2.0"
    }
  }
  
    backend "azurerm" {
    /*
       ACCESS KEY AND OTHER SECRETS SHOULD BE ADDED TO VARIABLE GROUP IN AZDO LIBRARIES   
    */
    storage_account_name = "glbldvterraformstatesta" #"storage_account_name"
    container_name       = "terraformstate"          #"blob_container_name"
    #key                  = "sql_paas_state.tfstate"  #"state_file_name"
    #access_key            = var.access_key
    #sas_token             = var.sas_token
  } 
}

provider "azurerm" {
  features {}
}

# Initializing and mapping var to local context
locals {

  mod_location                  = var.location
  mod_rg_name                   = var.resource_group_name
  mod_vnet_name                 = var.vnet_name
  mod_subnet_name               = var.subnet_name
  mod_acrname                   = var.acr_name
  mod_dns_prefix                = var.dns_prefix
  mod_cluster_name              = var.cluster_name
  mod_agent_size                = var.agent_size
  mod_agent_count               = var.agent_count
  mod_subnet_rg                 = var.subnet_rg
  }

# Get Subnet Id 
data "azurerm_subnet" "tfsubnet" {
  name                 = local.mod_subnet_name
  virtual_network_name = local.mod_vnet_name
  resource_group_name  = local.mod_subnet_rg
}

##ACR Provisioning
resource "azurerm_container_registry" "acr" {
  name                     = local.mod_acrname
  resource_group_name      = local.mod_rg_name
  location                 = local.mod_location
  sku                      = "Premium"
  admin_enabled            = true
}

resource "azurerm_private_endpoint" "tfprivateendpoint" {
  name                = "${local.mod_acrname}-pep"
  location            = local.mod_location
  resource_group_name = local.mod_rg_name
  subnet_id           = data.azurerm_subnet.tfsubnet.id

  private_service_connection {
    name                           = "${local.mod_acrname}-pec"
    private_connection_resource_id = azurerm_container_registry.acr.id
    subresource_names              = [ "registry" ]
    is_manual_connection           = false
  }
}
// data "azurerm_key_vault" "akv" {
//   name                = "akssshkey" // KeyVault name
//   resource_group_name = "emna-dv-iac-agentpool-rgp" // resourceGroup
// }


// data "azurerm_key_vault_secret" "kvsecret" {
// name = "publickey" // Name of secret
// key_vault_id = data.azurerm_key_vault.akv.id
// }

#aks
resource "azurerm_kubernetes_cluster" "aks" {
  location            = local.mod_location
  name                = local.mod_cluster_name
  resource_group_name = local.mod_rg_name
  dns_prefix          = local.mod_dns_prefix
  kubernetes_version  = "1.24.6"

  #private_cluster_enabled = true

  default_node_pool {
    name       = "agentpool"
    vm_size    = local.mod_agent_size
    node_count = local.mod_agent_count
    type       = "VirtualMachineScaleSets"
    enable_auto_scaling = false
    vnet_subnet_id = data.azurerm_subnet.tfsubnet.id
  }

   windows_profile {
     admin_username    = "winadmin"
     admin_password    = "windowsadmin@123"
   }

  linux_profile {
    admin_username = "ubuntu"
    ssh_key {
            #key_data = data.azurerm_key_vault_secret.kvsecret.value
            key_data = var.ssh_key
        }
    }

  identity {
    type = "SystemAssigned"           #only one of `identity,service_principal` can be specified
  }

  network_profile {
    load_balancer_sku = "Standard"
    network_plugin    = "azure"
  }

  # service_principal {
  #   client_id     = var.aks_service_principal_app_id
  #   client_secret = var.aks_service_principal_client_secret
  # }

  #role_based_access_control_enabled = true
    depends_on = [
    azurerm_private_endpoint.tfprivateendpoint
  ]
  
}

resource "azurerm_role_assignment" "akstoacr" {
  principal_id                     = azurerm_kubernetes_cluster.aks.kubelet_identity[0].object_id
  role_definition_name             = "AcrPull"
  scope                            = azurerm_container_registry.acr.id
  skip_service_principal_aad_check = true
  depends_on = [
    azurerm_private_endpoint.tfprivateendpoint,
    azurerm_container_registry.acr,
    azurerm_kubernetes_cluster.aks
  ]
}

resource "azurerm_kubernetes_cluster_node_pool" "example" {
   name                  = "windws"            # max characters allowed was 6
   kubernetes_cluster_id = azurerm_kubernetes_cluster.aks.id
   vm_size               = "Standard_DS2_v2"
   node_count            = 1
   os_type               = "Windows"
   vnet_subnet_id = data.azurerm_subnet.tfsubnet.id
    depends_on = [
    azurerm_kubernetes_cluster.aks
  ]
 }
